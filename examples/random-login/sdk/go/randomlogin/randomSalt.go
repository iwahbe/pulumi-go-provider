// Code generated by random-login DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package randomlogin

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RandomSalt struct {
	pulumi.CustomResourceState

	Password       pulumi.StringPtrOutput `pulumi:"Password"`
	Salt           pulumi.StringPtrOutput `pulumi:"Salt"`
	SaltLength     pulumi.IntPtrOutput    `pulumi:"SaltLength"`
	SaltedPassword pulumi.StringPtrOutput `pulumi:"SaltedPassword"`
}

// NewRandomSalt registers a new resource with the given unique name, arguments, and options.
func NewRandomSalt(ctx *pulumi.Context,
	name string, args *RandomSaltArgs, opts ...pulumi.ResourceOption) (*RandomSalt, error) {
	if args == nil {
		args = &RandomSaltArgs{}
	}

	var resource RandomSalt
	err := ctx.RegisterResource("random-login:index:RandomSalt", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRandomSalt gets an existing RandomSalt resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRandomSalt(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RandomSaltState, opts ...pulumi.ResourceOption) (*RandomSalt, error) {
	var resource RandomSalt
	err := ctx.ReadResource("random-login:index:RandomSalt", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RandomSalt resources.
type randomSaltState struct {
}

type RandomSaltState struct {
}

func (RandomSaltState) ElementType() reflect.Type {
	return reflect.TypeOf((*randomSaltState)(nil)).Elem()
}

type randomSaltArgs struct {
}

// The set of arguments for constructing a RandomSalt resource.
type RandomSaltArgs struct {
}

func (RandomSaltArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*randomSaltArgs)(nil)).Elem()
}

type RandomSaltInput interface {
	pulumi.Input

	ToRandomSaltOutput() RandomSaltOutput
	ToRandomSaltOutputWithContext(ctx context.Context) RandomSaltOutput
}

func (*RandomSalt) ElementType() reflect.Type {
	return reflect.TypeOf((**RandomSalt)(nil)).Elem()
}

func (i *RandomSalt) ToRandomSaltOutput() RandomSaltOutput {
	return i.ToRandomSaltOutputWithContext(context.Background())
}

func (i *RandomSalt) ToRandomSaltOutputWithContext(ctx context.Context) RandomSaltOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RandomSaltOutput)
}

type RandomSaltOutput struct{ *pulumi.OutputState }

func (RandomSaltOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RandomSalt)(nil)).Elem()
}

func (o RandomSaltOutput) ToRandomSaltOutput() RandomSaltOutput {
	return o
}

func (o RandomSaltOutput) ToRandomSaltOutputWithContext(ctx context.Context) RandomSaltOutput {
	return o
}

func (o RandomSaltOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RandomSalt) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o RandomSaltOutput) Salt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RandomSalt) pulumi.StringPtrOutput { return v.Salt }).(pulumi.StringPtrOutput)
}

func (o RandomSaltOutput) SaltLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RandomSalt) pulumi.IntPtrOutput { return v.SaltLength }).(pulumi.IntPtrOutput)
}

func (o RandomSaltOutput) SaltedPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RandomSalt) pulumi.StringPtrOutput { return v.SaltedPassword }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RandomSaltInput)(nil)).Elem(), &RandomSalt{})
	pulumi.RegisterOutputType(RandomSaltOutput{})
}
